category: Dynamic Programming
problem_name: Nth Fibonacci Number
reference_solution: "class Solution {\n    public int nthFibonacci(int n) {\n    \
  \    return fib(n);\n    }\n    public static int fib(int n){\n        if(n<=1){\n\
  \            return n;\n        }\n        return fib(n-1)+fib(n-2);\n    }\n}"
rubric_items:
- blank: '1'
  code_fragment: if(n == 0 || n == 1)
  item: '[Edge case handling] Correctly handles base cases for n = 0 and n = 1'
  score: 2.0
- blank: '2'
  code_fragment: return fib(n-1) + fib(n-2)
  item: '[Recursive logic] Implements the recursive formula for Fibonacci correctly'
  score: 3.0
- blank: '3'
  code_fragment: public int nthFibonacci(int n)
  item: '[Method signature] Correctly defines the method signature for nthFibonacci'
  score: 1.0
- blank: '4'
  code_fragment: return n
  item: '[Base case return] Correctly returns n for base cases'
  score: 2.0
- blank: '5'
  code_fragment: fib(n)
  item: '[Function call] Correctly calls the fib function from nthFibonacci'
  score: 2.0
- blank: Multiple
  code_fragment: public static int fib(int n)
  item: '[Function definition] Correctly defines the fib function as static'
  score: 2.0
- blank: Multiple
  code_fragment: if(n <= 1)
  item: '[Conditional check] Correctly checks if n is less than or equal to 1'
  score: 2.0
- blank: Multiple
  code_fragment: return fib(n-1) + fib(n-2)
  item: '[Recursive calls] Correctly implements recursive calls to compute Fibonacci'
  score: 3.0
total_points: 17.0
