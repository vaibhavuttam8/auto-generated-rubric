category: Linked List
problem_name: Linked List Group Reverse
reference_solution: "// Java program to reverse a linked list\n// in groups of given\
  \ size\n\nclass Node {\n    int data;\n    Node next;\n\n    Node(int x) {\n   \
  \     data = x;\n        next = null;\n    }\n}\n\nclass GfG {\n  \n    // Function\
  \ to reverse K groups\n    static Node reverseKGroup(Node head, int k) {\n     \
  \   if (head == null) {\n            return head;\n        }\n\n        Node curr\
  \ = head;\n        Node newHead = null;\n        Node tail = null;\n\n        while\
  \ (curr != null) {\n            Node groupHead = curr;\n            Node prev =\
  \ null;\n            Node nextNode = null;\n            int count = 0;\n\n     \
  \       // Reverse the nodes in the current group\n            while (curr != null\
  \ && count < k) {\n                nextNode = curr.next;\n                curr.next\
  \ = prev;\n                prev = curr;\n                curr = nextNode;\n    \
  \            count++;\n            }\n\n            // If newHead is null, set it\
  \ to the\n            // last node of the first group\n            if (newHead ==\
  \ null) {\n                newHead = prev;\n            }\n\n            // Connect\
  \ the previous group to the \n            // current reversed group\n          \
  \  if (tail != null) {\n                tail.next = prev;\n            }\n\n   \
  \         // Move tail to the end of the\n              // reversed group\n    \
  \        tail = groupHead;\n        }\n\n        return newHead;\n    }\n\n    static\
  \ void printList(Node head) {\n        Node curr = head;\n        while (curr !=\
  \ null) {\n            System.out.print(curr.data + \" \");\n            curr =\
  \ curr.next;\n        }\n        System.out.println();\n    }\n\n    public static\
  \ void main(String[] args) {\n      \n        // Creating a sample singly linked\
  \ list:\n        // 1 -> 2 -> 3 -> 4 -> 5\n        Node head = new Node(1);\n  \
  \      head.next = new Node(2);\n        head.next.next = new Node(3);\n       \
  \ head.next.next.next = new Node(4);\n        head.next.next.next.next = new Node(5);\n\
  \n        head = reverseKGroup(head, 3);\n        printList(head);\n    }\n}\n"
rubric_items:
- blank: '1'
  code_fragment: Node curr = head
  item: '[Variable Initialization] Initializes current node to head of the list'
  score: 1.0
- blank: '1'
  code_fragment: Node newHead = null
  item: '[Variable Initialization] Initializes newHead to null for the reversed list'
  score: 1.0
- blank: '1'
  code_fragment: Node tail = null
  item: '[Variable Initialization] Initializes tail to null for connecting groups'
  score: 1.0
- blank: '3'
  code_fragment: if (head == null)
  item: '[Edge Case Handling] Checks if the head is null before processing'
  score: 1.0
- blank: '3'
  code_fragment: if (curr != null && count < k)
  item: '[Loop Condition] Correctly checks for the end of the current group'
  score: 1.0
- blank: '3'
  code_fragment: nextNode = curr.next
  item: '[Pointer Management] Correctly saves the next node before reversing'
  score: 1.0
- blank: '3'
  code_fragment: curr.next = prev
  item: '[Reversal Logic] Correctly reverses the current node'
  score: 1.0
- blank: '3'
  code_fragment: prev = curr
  item: '[Reversal Logic] Updates prev to the current node after reversal'
  score: 1.0
- blank: '3'
  code_fragment: tail.next = prev
  item: '[Connecting Groups] Connects the tail of the previous group to the new head'
  score: 1.0
- blank: '3'
  code_fragment: tail = groupHead
  item: '[Tail Management] Updates tail to the end of the current reversed group'
  score: 1.0
- blank: '3'
  code_fragment: return newHead
  item: '[Return Value] Returns the new head of the reversed list'
  score: 1.0
- blank: Multiple
  code_fragment: Essential algorithm components for this problem type
  item: '[Algorithm Correctness] Implements the core logic for reversing in groups'
  score: 3.0
- blank: Multiple
  code_fragment: Efficient algorithm pattern for this problem type
  item: '[Algorithm Efficiency] Ensures the algorithm runs in O(n) time complexity'
  score: 2.0
total_points: 16.0
