category: Binary Search
problem_name: First and Last Occurrences
reference_solution: "// User function Template for Java\n\nclass GFG {\n    ArrayList<Integer>\
  \ find(int arr[], int x) {\n        int low=0;\n        int res1=-1;\n        int\
  \ res2=-1;\n        int high=arr.length-1;\n        while(low<=high){\n        \
  \    int mid=(low+high)/2;\n            if(arr[mid]==x){\n                res1=mid;\n\
  \                high=mid-1;\n            }\n            else if(x<arr[mid]){\n\
  \                high=mid-1;\n            }\n            else{\n               \
  \ low=mid+1;\n            }\n        }\n        low=0;\n        high=arr.length-1;\n\
  \        while(low<=high){\n            int mid=(low+high)/2;\n            if(arr[mid]==x){\n\
  \                res2=mid;\n                low=mid+1;\n            }\n        \
  \    else if(x<arr[mid]){\n                high=mid-1;\n            }\n        \
  \    else{\n                low=mid+1;\n            }\n        }\n        ArrayList<Integer>\
  \ a= new ArrayList<>();\n        a.add(res1);\n        a.add(res2);\n        return\
  \ a;\n    }\n}"
rubric_items:
- blank: '1'
  code_fragment: arr.length == 0 || arr == null
  item: '[Edge case handling] Correctly handles empty array or null input'
  score: 1.0
- blank: '2'
  code_fragment: int low = 0; int high = arr.length - 1;
  item: '[Initialization] Correctly initializes low and high indices'
  score: 2.0
- blank: '3'
  code_fragment: while (low <= high) {
  item: '[Main loop structure] Implements the main loop for searching'
  score: 2.0
- blank: '4'
  code_fragment: int mid = (low + high) / 2;
  item: '[Midpoint calculation] Correctly calculates the midpoint'
  score: 2.0
- blank: '5'
  code_fragment: if (arr[mid] == x) {
  item: '[Condition check] Correctly checks if the mid element is equal to x'
  score: 2.0
- blank: '6'
  code_fragment: high = mid - 1;
  item: '[Update high] Correctly updates high for finding the first occurrence'
  score: 2.0
- blank: '7'
  code_fragment: low = mid + 1;
  item: '[Update low] Correctly updates low for finding the last occurrence'
  score: 2.0
- blank: '8'
  code_fragment: ArrayList<Integer> result = new ArrayList<>();
  item: '[Result storage] Correctly initializes the result storage'
  score: 2.0
- blank: '9'
  code_fragment: result.add(res1); result.add(res2);
  item: '[Result construction] Correctly adds results to the output list'
  score: 2.0
- blank: '10'
  code_fragment: return result;
  item: '[Return statement] Correctly returns the result'
  score: 2.0
- blank: Multiple
  code_fragment: O(log n)
  item: '[Time complexity] Implements a solution with O(log n) time complexity'
  score: 3.0
total_points: 22.0
