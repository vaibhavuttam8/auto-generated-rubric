category: Hash
problem_name: Frequencies in a Limited Array
reference_solution: "import java.util.*;\n\nclass Solution {\n    // Function to count\
  \ the frequency of all elements from 1 to N in the array.\n    public void frequencyCount(int[]\
  \ arr, int N, int P) {\n        int i = 0;\n        while (i < N) {\n          \
  \  // If this element is already processed, skip it\n            if (arr[i] <= 0\
  \ || arr[i] > N || arr[i] > P) {\n                i++;\n                continue;\n\
  \            }\n\n            // Find index corresponding to this element\n    \
  \        // For example, index for 5 is 4\n            int elementIndex = arr[i]\
  \ - 1;\n\n            // If the elementIndex has an element that is not processed\
  \ yet,\n            // store that element to arr[i] so that we don't lose anything.\n\
  \            if (arr[elementIndex] > 0) {\n                arr[i] = arr[elementIndex];\n\
  \n                // After storing arr[elementIndex], change it to store the initial\
  \ count of 'arr[i]'\n                arr[elementIndex] = -1;\n            } else\
  \ {\n                // If this is NOT the first occurrence of arr[i], decrement\
  \ its count.\n                arr[elementIndex]--;\n\n                // Initialize\
  \ arr[i] as 0, meaning the element 'i+1' is not seen so far\n                arr[i]\
  \ = 0;\n                i++;\n            }\n        }\n\n        // Convert the\
  \ counts to positive values\n        for (i = 0; i < N; i++) {\n            if (arr[i]\
  \ < 0) {\n                arr[i] = -arr[i];\n            } else {\n            \
  \    arr[i] = 0;\n            }\n        }\n    }\n}"
rubric_items:
- blank: '1'
  code_fragment: arr.length == 0 || arr.length == 1
  item: '[Edge case handling] Correctly handles empty array or single element array'
  score: 1.0
- blank: '2'
  code_fragment: int i = 0;
  item: '[Initialization] Correctly initializes index variable before the main loop'
  score: 2.0
- blank: '3'
  code_fragment: while (i < N)
  item: '[Loop structure] Implements the main loop to iterate through the array'
  score: 2.0
- blank: '4'
  code_fragment: if (arr[i] <= 0 || arr[i] > N)
  item: '[Conditional logic] Correctly checks for valid elements in the array'
  score: 2.0
- blank: '5'
  code_fragment: int elementIndex = arr[i] - 1;
  item: '[Index calculation] Correctly calculates the index for frequency counting'
  score: 2.0
- blank: '6'
  code_fragment: if (arr[elementIndex] > 0)
  item: '[First occurrence handling] Correctly identifies and processes the first
    occurrence'
  score: 2.0
- blank: '7'
  code_fragment: arr[elementIndex] = -1;
  item: '[State update] Correctly marks the element as processed'
  score: 2.0
- blank: '8'
  code_fragment: arr[elementIndex]--;
  item: '[Count decrement] Correctly decrements the count for subsequent occurrences'
  score: 2.0
- blank: '9'
  code_fragment: arr[i] = 0;
  item: '[Initialization of result] Initializes the frequency count for unprocessed
    elements'
  score: 2.0
- blank: '10'
  code_fragment: for (i = 0; i < N; i++)
  item: '[Final adjustment loop] Implements the loop to finalize frequency counts'
  score: 2.0
- blank: '11'
  code_fragment: if (arr[i] < 0)
  item: '[Final count adjustment] Correctly converts negative counts to positive'
  score: 2.0
- blank: '12'
  code_fragment: return arr;
  item: '[Return statement] Correctly returns the final frequency array'
  score: 2.0
total_points: 23.0
