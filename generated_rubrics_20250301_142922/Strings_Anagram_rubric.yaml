category: Strings
problem_name: Anagram
reference_solution: "// Java Code to check if two Strings are anagram of \n// each\
  \ other using Frequency Array\n\nclass GfG {\n\n    // As the input strings can\
  \ only have lowercase \n    // characters, the maximum characters will be 26\n \
  \   static final int MAX_CHAR = 26;\n\n    static boolean areAnagrams(String s1,\
  \ String s2) {\n        int[] freq = new int[MAX_CHAR];\n\n        // Count frequency\
  \ of each character in string s1\n        for (int i = 0; i < s1.length(); i++)\n\
  \            freq[s1.charAt(i) - 'a']++;\n\n        // Count frequency of each character\
  \ in string s2\n        for (int i = 0; i < s2.length(); i++)\n            freq[s2.charAt(i)\
  \ - 'a']--;\n\n        // Check if all frequencies are zero\n        for (int count\
  \ : freq) {\n            if (count != 0)\n                return false;\n      \
  \  }\n\n        return true;\n    }\n\n    public static void main(String[] args)\
  \ {\n        String s1 = \"geeks\";\n        String s2 = \"kseeg\";\n        System.out.println(areAnagrams(s1,\
  \ s2));\n    }\n}"
rubric_items:
- blank: '5'
  code_fragment: s.length() == 0 || s.length() == 1
  item: '[Edge case handling] Handles empty strings, single character strings, or
    case sensitivity'
  score: 1.0
- blank: '1'
  code_fragment: initialization pattern specific to this problem
  item: '[Logical correctness] Correctly initializes variables before the main algorithm'
  score: 2.0
- blank: '2'
  code_fragment: main loop pattern specific to this problem
  item: '[Logical correctness] Properly implements the main loop structure'
  score: 2.0
- blank: '3'
  code_fragment: conditional logic pattern specific to this problem
  item: '[Logical correctness] Correctly handles conditional logic within the algorithm'
  score: 2.0
- blank: Multiple
  code_fragment: variable update pattern specific to this problem
  item: '[Logical correctness] Updates variables correctly during algorithm execution'
  score: 2.0
- blank: Multiple
  code_fragment: return pattern specific to this problem
  item: '[Logical correctness] Returns the correct result'
  score: 2.0
- blank: Multiple
  code_fragment: Essential algorithm components for this problem type
  item: '[Algorithm correctness] Correctly implements the core algorithm logic'
  score: 3.0
- blank: Multiple
  code_fragment: Efficient algorithm pattern for this problem type
  item: '[Algorithm efficiency] Uses an efficient approach with appropriate time complexity'
  score: 2.0
total_points: 16.0
