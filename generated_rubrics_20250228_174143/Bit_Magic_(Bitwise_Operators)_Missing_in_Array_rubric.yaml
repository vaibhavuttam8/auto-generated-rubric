category: Bit Magic (Bitwise Operators)
problem_name: Missing in Array
reference_solution: "class Solution {\n    int missingNumber(int arr[]) {\n      \
  \  int xor1 = 0, xor2 = 0;\n        int n = arr.length + 1;\n\n        // XOR all\
  \ array elements\n        for (int i = 0; i < n - 1; i++) {\n            xor2 ^=\
  \ arr[i];\n        }\n\n        // XOR all numbers from 1 to n\n        for (int\
  \ i = 1; i <= n; i++) {\n            xor1 ^= i;\n        }\n\n        // Missing\
  \ number is the XOR of xor1 and xor2\n        return xor1 ^ xor2;\n    }\n}"
rubric_items:
- blank: '1'
  code_fragment: arr.length <= 1 || arr == null
  item: '[Edge case handling] Correctly checks for empty or single element array'
  score: 1.0
- blank: '2'
  code_fragment: int n = arr.length + 1
  item: '[Initialization] Correctly initializes n to represent the full range of numbers'
  score: 2.0
- blank: '3'
  code_fragment: for (int i = 0; i < n - 1; i++)
  item: '[Main loop structure] Implements the loop to iterate through the array elements'
  score: 2.0
- blank: '4'
  code_fragment: xor2 ^= arr[i]
  item: '[XOR operation] Correctly applies XOR to each element in the array'
  score: 2.0
- blank: '5'
  code_fragment: for (int i = 1; i <= n; i++)
  item: '[Main loop structure] Implements the loop to iterate through the range of
    numbers from 1 to n'
  score: 2.0
- blank: '6'
  code_fragment: xor1 ^= i
  item: '[XOR operation] Correctly applies XOR to each number in the range from 1
    to n'
  score: 2.0
- blank: '7'
  code_fragment: return xor1 ^ xor2
  item: '[Return statement] Correctly returns the result of the XOR operation to find
    the missing number'
  score: 2.0
- blank: '8'
  code_fragment: Efficient algorithm pattern
  item: '[Algorithm efficiency] Uses XOR to achieve O(n) time complexity and O(1)
    space complexity'
  score: 3.0
total_points: 16.0
