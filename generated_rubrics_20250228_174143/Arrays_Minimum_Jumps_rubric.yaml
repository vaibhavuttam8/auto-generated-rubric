category: Arrays
problem_name: Minimum Jumps
reference_solution: "class Solution {\n    static int minJumps(int arr[]) {\n    \
  \    if (arr.length <= 1) return 0;\n\n        // Return -1 if not possible to jump\n\
  \        if (arr[0] == 0) return -1;\n\n        // initialization\n        int maxReach\
  \ = arr[0];\n        int step = arr[0];\n        int jump = 1;\n\n        // Start\
  \ traversing array\n        for (int i = 1; i < arr.length; i++) {\n           \
  \ // Check if we have reached the end of the array\n            if (i == arr.length\
  \ - 1) return jump;\n\n            // updating maxReach\n            maxReach =\
  \ Math.max(maxReach, i + arr[i]);\n\n            // we use a step to get to the\
  \ current index\n            step--;\n\n            // If no further steps left\n\
  \            if (step == 0) {\n                //  we must have used a jump\n  \
  \              jump++;\n\n                // Check if the current index/position\
  \  or lesser index\n                //  is the maximum reach point from the previous\
  \ indexes\n                if (i >= maxReach) return -1;\n\n                // re-initialize\
  \ the steps to the amount\n                // of steps to reach maxReach from position\
  \ i.\n                step = maxReach - i;\n            }\n        }\n\n       \
  \ return -1;\n    }\n}"
rubric_items:
- blank: '1'
  code_fragment: arr.length <= 1 || arr[0] == 0
  item: '[Edge case handling] Correctly checks if the array length is less than or
    equal to 1 or if the first element is 0, returning -1 if true'
  score: 1.0
- blank: '2'
  code_fragment: int jump = 1; int step = arr[0]; int maxReach = arr[0];
  item: '[Variable initialization] Properly initializes jump, step, and maxReach variables
    before entering the loop'
  score: 2.0
- blank: '3'
  code_fragment: for(int i = 1; i < arr.length; i++)
  item: '[Loop structure] Implements a loop starting from index 1 to traverse the
    array'
  score: 2.0
- blank: '4'
  code_fragment: if(i == arr.length - 1) return jump;
  item: '[End condition check] Correctly checks if the current index is the last index,
    returning the jump count'
  score: 2.0
- blank: '5'
  code_fragment: maxReach = Math.max(maxReach, i + arr[i]);
  item: '[Max reach update] Accurately updates maxReach using the current index and
    its jump value'
  score: 2.0
- blank: '6'
  code_fragment: step--;
  item: '[Step decrement] Correctly decrements the step count after moving to the
    next index'
  score: 1.0
- blank: '7'
  code_fragment: if(step == 0) { jump++; }
  item: '[Jump increment] Properly increments the jump count when steps are exhausted'
  score: 2.0
- blank: '8'
  code_fragment: if(i >= maxReach) return -1;
  item: '[Reachability check] Correctly checks if the current index exceeds maxReach,
    returning -1 if true'
  score: 2.0
- blank: '9'
  code_fragment: step = maxReach - i;
  item: '[Step re-initialization] Correctly re-initializes the step count based on
    the new maxReach'
  score: 2.0
- blank: '10'
  code_fragment: return -1;
  item: '[Final return] Appropriately returns -1 if the end of the array is not reachable'
  score: 1.0
total_points: 17.0
