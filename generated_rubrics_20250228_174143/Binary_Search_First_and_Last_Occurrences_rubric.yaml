category: Binary Search
problem_name: First and Last Occurrences
reference_solution: "// User function Template for Java\n\nclass GFG {\n    ArrayList<Integer>\
  \ find(int arr[], int x) {\n        int low=0;\n        int res1=-1;\n        int\
  \ res2=-1;\n        int high=arr.length-1;\n        while(low<=high){\n        \
  \    int mid=(low+high)/2;\n            if(arr[mid]==x){\n                res1=mid;\n\
  \                high=mid-1;\n            }\n            else if(x<arr[mid]){\n\
  \                high=mid-1;\n            }\n            else{\n               \
  \ low=mid+1;\n            }\n        }\n        low=0;\n        high=arr.length-1;\n\
  \        while(low<=high){\n            int mid=(low+high)/2;\n            if(arr[mid]==x){\n\
  \                res2=mid;\n                low=mid+1;\n            }\n        \
  \    else if(x<arr[mid]){\n                high=mid-1;\n            }\n        \
  \    else{\n                low=mid+1;\n            }\n        }\n        ArrayList<Integer>\
  \ a= new ArrayList<>();\n        a.add(res1);\n        a.add(res2);\n        return\
  \ a;\n    }\n}"
rubric_items:
- blank: '1'
  code_fragment: arr.length == 0 || arr == null
  item: '[Edge case handling] Correctly handles empty array case'
  score: 1.0
- blank: '2'
  code_fragment: arr.length == 1 && arr[0] == x
  item: '[Edge case handling] Correctly handles single element array case'
  score: 1.0
- blank: '3'
  code_fragment: int low=0; int high=arr.length-1; int res1=-1; int res2=-1;
  item: '[Initialization] Correctly initializes low, high, res1, and res2'
  score: 2.0
- blank: '4'
  code_fragment: while(low <= high)
  item: '[Main loop structure] Implements the main loop for finding the first occurrence'
  score: 2.0
- blank: '5'
  code_fragment: int mid = (low + high) / 2;
  item: '[Midpoint calculation] Correctly calculates the midpoint in the binary search'
  score: 2.0
- blank: '6'
  code_fragment: if(arr[mid] == x)
  item: '[Conditional logic] Correctly checks if the mid element is equal to x'
  score: 2.0
- blank: '7'
  code_fragment: res1 = mid; high = mid - 1;
  item: '[First occurrence logic] Updates res1 and high correctly when x is found'
  score: 2.0
- blank: '8'
  code_fragment: low = mid + 1;
  item: '[First occurrence logic] Correctly updates low when x is greater than arr[mid]'
  score: 2.0
- blank: '9'
  code_fragment: while(low <= high)
  item: '[Main loop structure] Implements the main loop for finding the last occurrence'
  score: 2.0
- blank: '10'
  code_fragment: if(arr[mid] == x)
  item: '[Conditional logic] Correctly checks if the mid element is equal to x for
    last occurrence'
  score: 2.0
- blank: '11'
  code_fragment: res2 = mid; low = mid + 1;
  item: '[Last occurrence logic] Updates res2 and low correctly when x is found'
  score: 2.0
- blank: '12'
  code_fragment: return Arrays.asList(res1, res2);
  item: '[Return statement] Correctly returns the result as a list of indices'
  score: 2.0
- blank: Multiple
  code_fragment: Efficient algorithm with O(log n) complexity
  item: '[Algorithm efficiency] Implements an efficient binary search algorithm'
  score: 2.0
total_points: 24.0
