category: Tree
problem_name: Tree Boundary Traversal
reference_solution: "\n\n// User function Template for Java\n/*\nclass Node\n{\n \
  \   int data;\n    Node left, right;\n\n    public Node(int d)\n    {\n        data\
  \ = d;\n        left = right = null;\n    }\n}\n*/\n\nclass Solution {\n    static\
  \ boolean isLeaf(Node node){\n        return node.left == null && node.right ==\
  \ null;\n    }\n    static void collectBoundaryLeft(Node root, ArrayList<Integer>\
  \ res){\n        if(root == null || isLeaf(root)){\n            return;\n      \
  \  }\n        res.add(root.data);\n        if(root.left != null){\n            collectBoundaryLeft(root.left,\
  \ res);\n        }\n        else if(root.right != null){\n            collectBoundaryLeft(root.right,\
  \ res);\n        }\n    } \n    static void collectLeaves(Node root, ArrayList<Integer>\
  \ res){\n        if(root == null){\n            return;\n        }\n        if(isLeaf(root)){\n\
  \            res.add(root.data);\n            return; \n        }\n        collectLeaves(root.left,\
  \ res);\n        collectLeaves(root.right, res);\n    }\n    static void collectBoundaryRight(Node\
  \ root, ArrayList<Integer> res){\n        if(root == null || isLeaf(root))\n   \
  \     return;\n        \n        if(root.right != null){\n            collectBoundaryRight(root.right,\
  \ res);\n        }\n        else if(root.left != null){\n            collectBoundaryRight(root.left,\
  \ res);\n        }\n        res.add(root.data);\n    }\n    ArrayList<Integer> boundaryTraversal(Node\
  \ root) {\n        ArrayList<Integer> res = new ArrayList<>();\n        \n     \
  \   if(root == null){\n            return res;\n        }\n        if(!isLeaf(root)){\n\
  \            res.add(root.data);\n        }\n        collectBoundaryLeft(root.left,\
  \ res);\n        \n        collectLeaves(root, res);\n        collectBoundaryRight(root.right,\
  \ res);\n        return res;\n    }\n}"
rubric_items:
- blank: '5'
  code_fragment: arr.length <= 1
  item: '[Edge case handling] Handles empty array or single element array'
  score: 1.0
- blank: '1'
  code_fragment: ITEM_1_BOOL
  item: '[Logical correctness] Correctly initializes variables before the main algorithm'
  score: 2.0
- blank: '2'
  code_fragment: ITEM_2_BOOL
  item: '[Logical correctness] Properly implements the main loop structure'
  score: 2.0
- blank: '3'
  code_fragment: ITEM_3_BOOL
  item: '[Logical correctness] Correctly handles conditional logic within the algorithm'
  score: 2.0
- blank: Multiple
  code_fragment: contains(update pattern)
  item: '[Logical correctness] Updates variables correctly during algorithm execution'
  score: 2.0
- blank: Multiple
  code_fragment: return result
  item: '[Logical correctness] Returns the correct result'
  score: 2.0
- blank: Multiple
  code_fragment: ITEM_1_BOOL _AND ITEM_2_BOOL _AND ITEM_3_BOOL
  item: '[Algorithm correctness] Correctly implements the core algorithm logic'
  score: 3.0
- blank: Multiple
  code_fragment: ITEM_2_BOOL _AND NOT(contains(nested loops))
  item: '[Algorithm efficiency] Uses an efficient approach (O(n) time complexity)'
  score: 2.0
total_points: 16.0
