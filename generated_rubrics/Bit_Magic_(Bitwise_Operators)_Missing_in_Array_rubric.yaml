category: Bit Magic (Bitwise Operators)
problem_name: Missing in Array
reference_solution: "class Solution {\n    int missingNumber(int arr[]) {\n      \
  \  int xor1 = 0, xor2 = 0;\n        int n = arr.length + 1;\n\n        // XOR all\
  \ array elements\n        for (int i = 0; i < n - 1; i++) {\n            xor2 ^=\
  \ arr[i];\n        }\n\n        // XOR all numbers from 1 to n\n        for (int\
  \ i = 1; i <= n; i++) {\n            xor1 ^= i;\n        }\n\n        // Missing\
  \ number is the XOR of xor1 and xor2\n        return xor1 ^ xor2;\n    }\n}"
rubric_items:
- blank: '5'
  code_fragment: arr.length <= 1
  item: '[Edge case handling] Handles empty array or single element array'
  score: 1.0
- blank: '1'
  code_fragment: ITEM_1_BOOL
  item: '[Logical correctness] Correctly initializes variables before the main algorithm'
  score: 2.0
- blank: '2'
  code_fragment: ITEM_2_BOOL
  item: '[Logical correctness] Properly implements the main loop structure'
  score: 2.0
- blank: '3'
  code_fragment: ITEM_3_BOOL
  item: '[Logical correctness] Correctly handles conditional logic within the algorithm'
  score: 2.0
- blank: Multiple
  code_fragment: contains(update pattern)
  item: '[Logical correctness] Updates variables correctly during algorithm execution'
  score: 2.0
- blank: Multiple
  code_fragment: return result
  item: '[Logical correctness] Returns the correct result'
  score: 2.0
- blank: Multiple
  code_fragment: ITEM_1_BOOL _AND ITEM_2_BOOL _AND ITEM_3_BOOL
  item: '[Algorithm correctness] Correctly implements the core algorithm logic'
  score: 3.0
- blank: Multiple
  code_fragment: ITEM_2_BOOL _AND NOT(contains(nested loops))
  item: '[Algorithm efficiency] Uses an efficient approach (O(n) time complexity)'
  score: 2.0
total_points: 16.0
