category: Tree
problem_name: Check for BST
reference_solution: "\n\n// User function Template for Java\n\nclass Solution {\n\
  \    private Integer prev= null;\n    // Function to check whether a Binary Tree\
  \ is BST or not.\n    boolean isBST(Node root) {\n        // code here.\n      \
  \  return inorderCheck(root);\n    }\n    private boolean inorderCheck(Node node)\
  \ {\n        if (node == null) return true;\n        if (!inorderCheck(node.left))\
  \ return false;\n        if (prev != null && node.data <= prev) return false;\n\
  \        prev= node.data;\n        return inorderCheck(node.right);\n    }\n}"
rubric_items:
- blank: '3'
  code_fragment: if(root == null)
  item: '[Conditional logic] if(root == null)'
  score: 1.0
- blank: '5'
  code_fragment: arr.length <= 1
  item: '[Edge case handling] Handles empty array or single element array'
  score: 1.0
- blank: '1'
  code_fragment: ITEM_1_BOOL
  item: '[Logical correctness] Correctly initializes variables before the main algorithm'
  score: 2.0
- blank: '2'
  code_fragment: ITEM_2_BOOL
  item: '[Logical correctness] Properly implements the main loop structure'
  score: 2.0
- blank: '3'
  code_fragment: ITEM_3_BOOL
  item: '[Logical correctness] Correctly handles conditional logic within the algorithm'
  score: 2.0
- blank: Multiple
  code_fragment: contains(update pattern)
  item: '[Logical correctness] Updates variables correctly during algorithm execution'
  score: 2.0
- blank: Multiple
  code_fragment: return result
  item: '[Logical correctness] Returns the correct result'
  score: 2.0
- blank: Multiple
  code_fragment: ITEM_1_BOOL _AND ITEM_2_BOOL _AND ITEM_3_BOOL
  item: '[Algorithm correctness] Correctly implements the core algorithm logic'
  score: 3.0
- blank: Multiple
  code_fragment: ITEM_2_BOOL _AND NOT(contains(nested loops))
  item: '[Algorithm efficiency] Uses an efficient approach (O(n) time complexity)'
  score: 2.0
total_points: 17.0
