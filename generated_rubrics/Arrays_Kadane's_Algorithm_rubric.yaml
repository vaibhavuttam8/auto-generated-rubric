category: Arrays
problem_name: Kadane's Algorithm
reference_solution: "// Java Program to find the maximum subarray sum using nested\
  \ loops \n\nimport java.util.Arrays;\n\nclass GfG {\n\n    // Function to find the\
  \ sum of subarray with maximum sum\n    static int maxSubarraySum(int[] arr) {\n\
  \        int res = arr[0];\n  \n        // Outer loop for starting point of subarray\n\
  \        for (int i = 0; i < arr.length; i++) {\n            int currSum = 0;\n\
  \      \n            // Inner loop for ending point of subarray\n            for\
  \ (int j = i; j < arr.length; j++) {\n                currSum = currSum + arr[j];\n\
  \              \n                // Update res if currSum is greater than res\n\
  \                res = Math.max(res, currSum);\n            }\n        }\n     \
  \   return res;\n    }\n\n    public static void main(String[] args) {\n       \
  \ int[] arr = {2, 3, -8, 7, -1, 2, 3};\n        System.out.println(maxSubarraySum(arr));\n\
  \    }\n}"
rubric_items:
- blank: '5'
  code_fragment: arr.length <= 1
  item: '[Edge case handling] Handles empty array or single element array'
  score: 1.0
- blank: '1'
  code_fragment: ITEM_1_BOOL
  item: '[Logical correctness] Correctly initializes variables before the main algorithm'
  score: 2.0
- blank: '2'
  code_fragment: ITEM_2_BOOL
  item: '[Logical correctness] Properly implements the main loop structure'
  score: 2.0
- blank: '3'
  code_fragment: ITEM_3_BOOL
  item: '[Logical correctness] Correctly handles conditional logic within the algorithm'
  score: 2.0
- blank: Multiple
  code_fragment: contains(update pattern)
  item: '[Logical correctness] Updates variables correctly during algorithm execution'
  score: 2.0
- blank: Multiple
  code_fragment: return result
  item: '[Logical correctness] Returns the correct result'
  score: 2.0
- blank: Multiple
  code_fragment: ITEM_1_BOOL _AND ITEM_2_BOOL _AND ITEM_3_BOOL
  item: '[Algorithm correctness] Correctly implements the core algorithm logic'
  score: 3.0
- blank: Multiple
  code_fragment: ITEM_2_BOOL _AND NOT(contains(nested loops))
  item: '[Algorithm efficiency] Uses an efficient approach (O(n) time complexity)'
  score: 2.0
total_points: 16.0
