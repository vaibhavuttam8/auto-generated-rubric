category: Hash
problem_name: Frequencies in a Limited Array
reference_solution: "import java.util.*;\n\nclass Solution {\n    // Function to count\
  \ the frequency of all elements from 1 to N in the array.\n    public void frequencyCount(int[]\
  \ arr, int N, int P) {\n        int i = 0;\n        while (i < N) {\n          \
  \  // If this element is already processed, skip it\n            if (arr[i] <= 0\
  \ || arr[i] > N || arr[i] > P) {\n                i++;\n                continue;\n\
  \            }\n\n            // Find index corresponding to this element\n    \
  \        // For example, index for 5 is 4\n            int elementIndex = arr[i]\
  \ - 1;\n\n            // If the elementIndex has an element that is not processed\
  \ yet,\n            // store that element to arr[i] so that we don't lose anything.\n\
  \            if (arr[elementIndex] > 0) {\n                arr[i] = arr[elementIndex];\n\
  \n                // After storing arr[elementIndex], change it to store the initial\
  \ count of 'arr[i]'\n                arr[elementIndex] = -1;\n            } else\
  \ {\n                // If this is NOT the first occurrence of arr[i], decrement\
  \ its count.\n                arr[elementIndex]--;\n\n                // Initialize\
  \ arr[i] as 0, meaning the element 'i+1' is not seen so far\n                arr[i]\
  \ = 0;\n                i++;\n            }\n        }\n\n        // Convert the\
  \ counts to positive values\n        for (i = 0; i < N; i++) {\n            if (arr[i]\
  \ < 0) {\n                arr[i] = -arr[i];\n            } else {\n            \
  \    arr[i] = 0;\n            }\n        }\n    }\n}"
rubric_items:
- blank: '5'
  code_fragment: arr.length <= 1
  item: '[Edge case handling] Handles empty array or single element array'
  score: 1.0
- blank: '1'
  code_fragment: ITEM_1_BOOL
  item: '[Logical correctness] Correctly initializes variables before the main algorithm'
  score: 2.0
- blank: '2'
  code_fragment: ITEM_2_BOOL
  item: '[Logical correctness] Properly implements the main loop structure'
  score: 2.0
- blank: '3'
  code_fragment: ITEM_3_BOOL
  item: '[Logical correctness] Correctly handles conditional logic within the algorithm'
  score: 2.0
- blank: Multiple
  code_fragment: contains(update pattern)
  item: '[Logical correctness] Updates variables correctly during algorithm execution'
  score: 2.0
- blank: Multiple
  code_fragment: return result
  item: '[Logical correctness] Returns the correct result'
  score: 2.0
- blank: Multiple
  code_fragment: ITEM_1_BOOL _AND ITEM_2_BOOL _AND ITEM_3_BOOL
  item: '[Algorithm correctness] Correctly implements the core algorithm logic'
  score: 3.0
- blank: Multiple
  code_fragment: ITEM_2_BOOL _AND NOT(contains(nested loops))
  item: '[Algorithm efficiency] Uses an efficient approach (O(n) time complexity)'
  score: 2.0
total_points: 16.0
